/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Greeter, GreeterInterface } from '../Greeter';

const _abi = [
  {
    inputs: [
      {
        internalType: 'string',
        name: '_greeting',
        type: 'string',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'string',
        name: '_greeting',
        type: 'string',
      },
    ],
    name: 'GreetingSet',
    type: 'event',
  },
  {
    inputs: [],
    name: 'greet',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'greeting',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: '_greeting',
        type: 'string',
      },
    ],
    name: 'setGreeting',
    outputs: [
      {
        internalType: 'bool',
        name: '_changedGreet',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x60806040523480156200001157600080fd5b50604051620009da380380620009da833981016040819052620000349162000199565b62000064604051806060016040528060228152602001620009b860229139826200008160201b6200031f1760201c565b805162000079906000906020840190620000f3565b505062000333565b620000ce82826040516024016200009a9291906200027b565b60408051601f198184030181529190526020810180516001600160e01b03908116634b5c427760e01b17909152620000d216565b5050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b8280546200010190620002e0565b90600052602060002090601f01602090048101928262000125576000855562000170565b82601f106200014057805160ff191683800117855562000170565b8280016001018555821562000170579182015b828111156200017057825182559160200191906001019062000153565b506200017e92915062000182565b5090565b5b808211156200017e576000815560010162000183565b600060208284031215620001ab578081fd5b81516001600160401b0380821115620001c2578283fd5b818401915084601f830112620001d6578283fd5b815181811115620001eb57620001eb6200031d565b604051601f8201601f19908116603f011681019083821181831017156200021657620002166200031d565b816040528281528760208487010111156200022f578586fd5b62000242836020830160208801620002ad565b979650505050505050565b6000815180845262000267816020860160208601620002ad565b601f01601f19169290920160200192915050565b6040815260006200029060408301856200024d565b8281036020840152620002a481856200024d565b95945050505050565b60005b83811015620002ca578181015183820152602001620002b0565b83811115620002da576000848401525b50505050565b600181811c90821680620002f557607f821691505b602082108114156200031757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61067580620003436000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063a413686214610046578063cfae32171461006e578063ef690cc014610083575b600080fd5b61005961005436600461046e565b61008b565b60405190151581526020015b60405180910390f35b6100766101ff565b6040516100659190610563565b610076610291565b6000808251116100e15760405162461bcd60e51b815260206004820152601760248201527f477265657465723a20656d707479206772656574696e67000000000000000000604482015260640160405180910390fd5b6101ab6040518060400160405280601f81526020017f4368616e67696e67206772656574696e672066726f6d20257320746f2025730081525060008054610127906105ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610153906105ee565b80156101a05780601f10610175576101008083540402835291602001916101a0565b820191906000526020600020905b81548152906001019060200180831161018357829003601f168201915b505050505084610368565b81516101be9060009060208501906103d5565b50600190507fad181ee258ff92d26bf7ed2e6b571ef1cba3afc45f028b863b0f02adaffc2f06826040516101f29190610563565b60405180910390a1919050565b60606000805461020e906105ee565b80601f016020809104026020016040519081016040528092919081815260200182805461023a906105ee565b80156102875780601f1061025c57610100808354040283529160200191610287565b820191906000526020600020905b81548152906001019060200180831161026a57829003601f168201915b5050505050905090565b6000805461029e906105ee565b80601f01602080910402602001604051908101604052809291908181526020018280546102ca906105ee565b80156103175780601f106102ec57610100808354040283529160200191610317565b820191906000526020600020905b8154815290600101906020018083116102fa57829003601f168201915b505050505081565b610364828260405160240161033592919061057d565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b1790526103b4565b5050565b6103af838383604051602401610380939291906105ab565b60408051601f198184030181529190526020810180516001600160e01b0316632ced7cef60e01b1790526103b4565b505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b8280546103e1906105ee565b90600052602060002090601f0160209004810192826104035760008555610449565b82601f1061041c57805160ff1916838001178555610449565b82800160010185558215610449579182015b8281111561044957825182559160200191906001019061042e565b50610455929150610459565b5090565b5b80821115610455576000815560010161045a565b60006020828403121561047f578081fd5b813567ffffffffffffffff80821115610496578283fd5b818401915084601f8301126104a9578283fd5b8135818111156104bb576104bb610629565b604051601f8201601f19908116603f011681019083821181831017156104e3576104e3610629565b816040528281528760208487010111156104fb578586fd5b826020860160208301379182016020019490945295945050505050565b60008151808452815b8181101561053d57602081850181015186830182015201610521565b8181111561054e5782602083870101525b50601f01601f19169290920160200192915050565b6020815260006105766020830184610518565b9392505050565b6040815260006105906040830185610518565b82810360208401526105a28185610518565b95945050505050565b6060815260006105be6060830186610518565b82810360208401526105d08186610518565b905082810360408401526105e48185610518565b9695505050505050565b600181811c9082168061060257607f821691505b6020821081141561062357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea264697066735822122004665b4009bf32416c9364b20eee54a449074e6ece356b1edfc1c6c1b94324c664736f6c634300080400334465706c6f79696e67206120477265657465722077697468206772656574696e673a';

export class Greeter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(_greeting: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<Greeter> {
    return super.deploy(_greeting, overrides || {}) as Promise<Greeter>;
  }
  getDeployTransaction(_greeting: string, overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(_greeting, overrides || {});
  }
  attach(address: string): Greeter {
    return super.attach(address) as Greeter;
  }
  connect(signer: Signer): Greeter__factory {
    return super.connect(signer) as Greeter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GreeterInterface {
    return new utils.Interface(_abi) as GreeterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Greeter {
    return new Contract(address, _abi, signerOrProvider) as Greeter;
  }
}
